---
import { ProjectSchema } from "../content/config";
import BaseLayout from "./BaseLayout.astro";
import { Image } from "@astrojs/image/components";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import escapeHtml from 'escape-html'
import { Text, Node } from 'slate'
import RichContent from "../components/RichContent.astro";

export interface Props extends ProjectSchema {}

const { title, description, pubDate, updatedAt, heroImage, badge, slider, content } = Astro.props;
dayjs.extend(localizedFormat);
const displayDate = dayjs(pubDate).format("ll");

// const serialize = (content, msg?) => content.map((node, i) => {
//   console.log(Text)
//   if (Text.isText(node)) {
//     let string = escapeHtml(node.text)
//     if (node.bold) {
//       string = `<strong>${string}</strong>`
//     }
//     return string
//   }else{

//     switch (node.type) {
//       case 'blackquote':
//         return `<blockquote><p>${node.text}</p></blockquote>`
//       case 'paragraph':
//         return `<p>${node.text}</p>`
//       case 'link':
//         return `<a href="${escapeHtml(node.url)}">${node.text}</a>`
//       default:
//         return node
//     }
//   }
  
//   // const children = node.children.map(n => serialize(n)).join('')
//   // console.log(children)
  
// })
const serialize = node => {
  if (Text.isText(node)) {
    let string = escapeHtml(node.text)
    if (node.bold) {
      string = `<strong>${string}</strong>`
    }
    return string
  }

  const children = node.children.map(n => serialize(n)).join('')

  // console.log(node)

  switch (node.type) {
    case 'h1':
      return (
        `<h1>${children}</h1>`
      )
    case 'h2':
      return (
      `<h2>${children}</h2>`
      )
    case 'h3':
      return (
      `<h3>${children}</h3>`
      )
    case 'h4':
      return (
      `<h4>${children}</h4>`
      )
    case 'h5':
      return (
      `<h5>${children}</h5>`
      )
    case 'h6':
      return (
      `<h6>${children}</h5>`
      )
    case 'ol':
      return (
      `<ol>${children}</ol>`
      ) 
    case 'ul':
      return (
      `<ul>${children}</ul>`
      )
      case 'li':
    return (
      `<li>${children}</li>`
      )
    case 'quote':
      return `<blockquote><p>${children}</p></blockquote>`
    case 'paragraph':
      return `<p>${children}</p>`
    case 'link':
      return `<a href="${escapeHtml(node.url)}">${children}</a>`
    case 'upload':
      return `<Image
                aspectRatio={"16:9"}
                width={750}
                height={422}
                format="jpg"
                src=${escapeHtml(node.value.url)}
                alt={title}
                class="w-full mb-6"
            />`
    default:
      return `<p>${children}</p>`
  }
}

let htmlData = ""
content.map((node, i) => {
  htmlData += serialize(node);
})
---

<BaseLayout title={title} description={description} image={heroImage}>
  <main class="md:flex md:justify-center">
    <article class="prose prose-lg max-w-[750px] prose-img:mx-auto">
      <!-- Carousel -->
        <div class="carousel w-full">
          {
            slider && slider.map((slide, index)=>{
              return <>
                <div id={'image'+(index+1)} class="carousel-item w-full">
                  <Image
                    aspectRatio={"16:9"}
                    width={750}
                    height={422}
                    format="jpg"
                    src={slide.image.url}
                    alt={title}
                    class="w-full mb-6"
                  />
                </div> 
              </>
            })
          }
        </div> 
        <div class="flex justify-center w-full py-2 gap-2">
          {
            slider && slider.map((slide, index)=>{
              return <>
                <a href={'#image'+(index+1)}  class="btn btn-xs">{index+1}</a> 
              </>
            })
          }
        </div>
      <!-- End Carousel -->
      <h1 class="title my-2 text-4xl font-bold">{title}</h1>
      {pubDate && <time>{displayDate}</time>}
      <br />
      {badge && <div class="badge badge-secondary my-1">{badge}</div>}
      {
        updatedAt && (
          <div>
            {" "}
            Last updated on <time>{updatedAt}</time>{" "}
          </div>
        )
      }
      <div class="divider my-2"></div>
      <div id="rich_text">
        <RichContent html={htmlData}  />
      </div>
    </article>
  </main>
</BaseLayout>
